

// 1.Creează o funcție divideNumbers(a, b) care: 
// Verifică dacă ambele argumente sunt numere
// Verifică dacă al doilea argument nu este zero
// Returnează rezultatul împărțirii
// Aruncă erori corespunzătoare pentru cazurile invalide
function divideNumbers(a, b) {
  // Verifică dacă ambele argumente sunt numere
  if (typeof a !== "number" || typeof b !== "number") {
    throw new Error("Ambele argumente trebuie să fie numere.");
  }

  // Verifică dacă al doilea argument nu este zero
  if (b === 0) {
    throw new Error("Împărțirea la zero nu este permisă.");
  }

  // Returnează rezultatul împărțirii
  return a / b;
}

// 2.Implementează o funcție parseJSON(jsonString) care încearcă să parseze un string JSON și returnează obiectul rezultat sau un obiect gol în caz de eroare.
function parseJSON(jsonString) {
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.error("Eroare la parsarea JSON:", error.message);
    return {}; // returnează obiect gol în caz de eroare
  }
}

// 3.Creează o clasă FormValidation cu metode pentru validarea: 
// Adresei de email (trebuie să conțină @ și un domeniu valid)
// Numărului de telefon (format specific țării tale)
// Codului poștal Fiecare metodă ar trebui să arunce o eroare personalizată cu un mesaj descriptiv când validarea eșuează.
class FormValidation {
  static validateEmail(email) {
    try {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new Error("Email invalid: trebuie să conțină '@' și un domeniu valid.");
      }
      return { success: true, message: "Email valid." };
    } catch (error) {
      return { success: false, message: error.message };
    }
  }

  static validatePhone(phone) {
    try {
      const phoneRegex = /^(?:\+40|0)?7\d{8}$/;
      if (!phoneRegex.test(phone)) {
        throw new Error("Număr de telefon invalid: trebuie să fie în format românesc (ex: +40712345678 sau 0712345678).");
      }
      return { success: true, message: "Număr de telefon valid." };
    } catch (error) {
      return { success: false, message: error.message };
    }
  }

  static validatePostalCode(code) {
    try {
      const postalCodeRegex = /^\d{6}$/;
      if (!postalCodeRegex.test(code)) {
        throw new Error("Cod poștal invalid: trebuie să conțină exact 6 cifre.");
      }
      return { success: true, message: "Cod poștal valid." };
    } catch (error) {
      return { success: false, message: error.message };
    }
  }
}
console.log(FormValidation.validateEmail("test@exemplu.ro"));
// { success: true, message: 'Email valid.' }

console.log(FormValidation.validatePhone("0712345678"));
// { success: true, message: 'Număr de telefon valid.' }

console.log(FormValidation.validatePostalCode("12345a"));
// { success: false, message: 'Cod poștal invalid: trebuie să conțină exact 6 cifre.' }

// 4.Implementează o funcție asincronă loadData(url) care: 
// Folosește fetch pentru a obține date de la URL-ul dat
// Gestionează erorile de rețea
// Gestionează erorile la parsarea JSON
// Returnează datele sau aruncă erori descriptive
async function loadData(url) {
  try {
    const response = await fetch(url);

    // Verifică dacă răspunsul este ok (status 200-299)
    if (!response.ok) {
      throw new Error(`Eroare de rețea: ${response.status} ${response.statusText}`);
    }

    // Încearcă să parseze JSON-ul
    const data = await response.json();
    return data;

  } catch (error) {
    // Dacă e o eroare de rețea sau parsare JSON
    throw new Error(`Nu s-au putut încărca datele: ${error.message}`);
  }
}
loadData('https://jsonplaceholder.typicode.com/posts/1')
  .then(data => {
    console.log("Date încărcate:", data);
  })
  .catch(err => {
    console.error("Eroare:", err.message);
  });

// 5.Creează un sistem simplu de logging care: 
// Înregistrează erorile cu timestamp
// Categorizeaza erorile pe niveluri (info, warning, error, fatal)
// Salvează ultimele 10 erori în localStorage
class Logger {
  constructor(storageKey = "logHistory") {
    this.storageKey = storageKey;
    this.maxLogs = 10;
  }

  log(level, message) {
    const timestamp = new Date().toISOString();
    const entry = { timestamp, level, message };

    // Obține logurile curente din localStorage
    const logs = JSON.parse(localStorage.getItem(this.storageKey)) || [];

    // Adaugă noul log
    logs.push(entry);

    // Păstrează doar ultimele 10 mesaje
    const recentLogs = logs.slice(-this.maxLogs);

    // Salvează înapoi în localStorage
    localStorage.setItem(this.storageKey, JSON.stringify(recentLogs));

    // Afișează în consolă (opțional)
    console[level === "info" ? "log" : level === "warning" ? "warn" : "error"](
      `[${level.toUpperCase()}] ${timestamp} - ${message}`
    );
  }

  info(message) {
    this.log("info", message);
  }

  warning(message) {
    this.log("warning", message);
  }

  error(message) {
    this.log("error", message);
  }

  fatal(message) {
    this.log("fatal", message);
  }

  getLogs() {
    return JSON.parse(localStorage.getItem(this.storageKey)) || [];
  }

  clearLogs() {
    localStorage.removeItem(this.storageKey);
  }
}
const logger = new Logger();

logger.info("Aplicația a pornit.");
logger.warning("Memorie aproape plină.");
logger.error("Eroare la încărcarea datelor.");
logger.fatal("Sistemul s-a blocat.");

console.log("Ultimele loguri:", logger.getLogs());
